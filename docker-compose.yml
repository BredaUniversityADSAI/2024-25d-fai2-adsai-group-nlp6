# Production Docker Compose Configuration
# Use this file for production deployments with pre-built Docker images
# Optimized for performance and scalability with Azure Monitor integration

services:
  # ==========================================
  # Application Services (Production Ready)
  # ==========================================

  backend:
    image: soheilmp/emotion-clf-backend:latest
    ports:
      - "3120:3120"
    volumes:
      - ./models:/models:ro
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - MONITORING_ENABLED=true
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    container_name: emotion_backend
    networks:
      - emotion_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3120/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: soheilmp/emotion-clf-frontend:latest
    ports:
      - "3121:80"
    container_name: emotion_frontend
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emotion_network
    restart: unless-stopped
    environment:
      # Gemini API Configuration (optional)
      - REACT_APP_GEMINI_API_KEY=${REACT_APP_GEMINI_API_KEY:-}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# ==========================================
# Network Configuration
# ==========================================

networks:
  emotion_network:
    driver: bridge
    name: emotion_classification_network
