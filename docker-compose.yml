# Production Docker Compose Configuration
# Use this file for production deployments with pre-built Docker images
# Optimized for performance, monitoring, and scalability

services:
  # ==========================================
  # Application Services (Production Ready)
  # ==========================================
  
  backend:
    image: soheilmp/emotion-clf-backend:latest
    ports:
      - "3120:3120"
    volumes:
      - ./models:/models:ro
      - ./monitoring/metrics:/app/metrics
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PROMETHEUS_METRICS_ENABLED=true
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    container_name: emotion_backend
    networks:
      - emotion_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3120/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: soheilmp/emotion-clf-frontend:latest
    ports:
      - "3121:80"
    container_name: emotion_frontend
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - emotion_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ==========================================
  # Monitoring Infrastructure
  # ==========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: emotion_prometheus
    ports:
      - "3122:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'  # 30 days retention
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
      - '--storage.tsdb.max-block-duration=2h'
      - '--storage.tsdb.min-block-duration=5m'
      - '--query.max-concurrency=50'
      - '--query.timeout=2m'
    networks:
      - emotion_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: emotion_grafana
    ports:
      - "3123:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      # Security Configuration
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      
      # Performance & Analytics
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_ANALYTICS_GOOGLE_ANALYTICS_UA_ID=""
      
      # UI & Features
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      
      # Database & Session
      - GF_DATABASE_WAL=true
      - GF_SESSION_PROVIDER=memory
      - GF_SESSION_COOKIE_NAME=grafana_sess
      
      # Plugins
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      
      # Logging
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    networks:
      - emotion_network
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # System Metrics Collection
  # ==========================================

  node-exporter:
    image: prom/node-exporter:latest
    container_name: emotion_node_exporter
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'  
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.disable-exporter-metrics'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--no-collector.wifi'
      - '--no-collector.hwmon'
    networks:
      - emotion_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: emotion_cadvisor
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '--housekeeping_interval=10s'
      - '--max_housekeeping_interval=15s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl'
      - '--docker_only=true'
      - '--store_container_labels=false'
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - emotion_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# ==========================================
# Production Storage Configuration
# ==========================================

volumes:
  prometheus_data:
    driver: local
    name: emotion_prometheus_data
  grafana_data:
    driver: local
    name: emotion_grafana_data

# ==========================================
# Production Network Configuration
# ==========================================

networks:
  emotion_network:
    driver: bridge
    name: emotion_monitoring_network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: br-emotion
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
