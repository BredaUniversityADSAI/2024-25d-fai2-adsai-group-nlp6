name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, test ]
  pull_request:
    branches: [ main, test ]

jobs:
  # Job 1: Code Quality Checks (runs on all branches)
  quality-checks:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files --color=always --show-diff-on-failure

  # Job 2: Unit Tests (runs on all branches)
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Run pytest with coverage
        run: |
          mkdir -p test-reports
          poetry run pytest \
            --junitxml=test-reports/results.xml \
            --cov=src/emotion_clf_pipeline \
            --cov-report=xml:test-reports/coverage.xml \
            --cov-report=html:test-reports/htmlcov \
            --cov-report=term-missing

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-reports/

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: test-reports/coverage.xml
          fail_ci_if_error: false

  # Job 3: Security Scan (runs on test and main branches)
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run safety check
        run: |
          poetry add --group dev safety
          poetry run safety check --json --output safety-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: safety-report.json

  # Job 4: Build & Push Docker (only on main branch)
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Deploy (only on main branch, after all checks pass)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment to production would happen here"
          echo "Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest"
          # Add your deployment commands here
          # For example:
          # - Deploy to Azure Container Instances
          # - Update Kubernetes deployment
          # - Trigger Azure DevOps pipeline
          # - Send deployment notification to Slack/Teams
