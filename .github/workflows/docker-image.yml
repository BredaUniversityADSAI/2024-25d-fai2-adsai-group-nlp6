name: Docker Build, Scan & Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# Set global permissions for GITHUB_TOKEN
permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  # Frontend Docker Image (runs first to conserve resources)
  frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: soheilmp/emotion-clf-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Check GitHub Advanced Security availability
        id: check-ghas
        run: |
          # Check if we can access the code scanning API
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts" 2>/dev/null || echo "000")
          
          if [ "$response" = "200" ] || [ "$response" = "404" ]; then
            echo "ghas_available=true" >> $GITHUB_OUTPUT
            echo "✅ GitHub Advanced Security is available"
          else
            echo "ghas_available=false" >> $GITHUB_OUTPUT
            echo "⚠️  GitHub Advanced Security may not be enabled (HTTP $response)"
            echo "This is common for private repositories without GHAS license"
          fi

      - name: Upload frontend Trivy scan results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-ghas.outputs.ghas_available == 'true'
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: 'frontend-security'
        continue-on-error: true

      - name: Upload frontend scan results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-scan-results
          path: trivy-frontend-results.sarif
          retention-days: 30

      - name: Display frontend security scan summary
        if: always()
        run: |
          echo "## 🔒 Frontend Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "trivy-frontend-results.sarif" ]; then
            # Parse SARIF and display summary
            vulnerabilities=$(jq '.runs[0].results | length' trivy-frontend-results.sarif 2>/dev/null || echo "0")
            echo "- **Vulnerabilities Found:** $vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- **Scan Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
            
            # Display top vulnerabilities if any
            if [ "$vulnerabilities" -gt "0" ]; then
              echo "### Top Security Issues:" >> $GITHUB_STEP_SUMMARY
              jq -r '.runs[0].results[:5] | .[] | "- **" + .ruleId + "**: " + .message.text' trivy-frontend-results.sarif 2>/dev/null >> $GITHUB_STEP_SUMMARY || true
            fi
          else
            echo "- **Status:** Scan file not found" >> $GITHUB_STEP_SUMMARY
          fi
          category: 'frontend-security'
        continue-on-error: true

      - name: Upload frontend scan results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-scan-results
          path: trivy-frontend-results.sarif
          retention-days: 30

      - name: Display frontend security scan summary
        if: always()
        run: |
          echo "## 🔒 Frontend Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "trivy-frontend-results.sarif" ]; then
            # Parse SARIF and display summary
            vulnerabilities=$(jq '.runs[0].results | length' trivy-frontend-results.sarif 2>/dev/null || echo "0")
            echo "- **Vulnerabilities Found:** $vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- **Scan Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
            
            # Display top vulnerabilities if any
            if [ "$vulnerabilities" -gt "0" ]; then
              echo "### Top Security Issues:" >> $GITHUB_STEP_SUMMARY
              jq -r '.runs[0].results[:5] | .[] | "- **" + .ruleId + "**: " + .message.text' trivy-frontend-results.sarif 2>/dev/null >> $GITHUB_STEP_SUMMARY || true
            fi
          else
            echo "- **Status:** Scan file not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Push frontend image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Backend Docker Image (runs after frontend to avoid resource conflicts)
  backend:
    runs-on: ubuntu-latest
    needs: frontend  # Run after frontend to conserve disk space
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space before build
        run: |
          # Clean up space used by previous jobs and system packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          docker system prune -af --volumes
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: soheilmp/emotion-clf-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Free up disk space before security scan
        run: |
          # Clean up build cache and unused Docker objects
          docker system prune -af --volumes
          df -h

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload backend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'
          category: 'backend-security'

      - name: Push backend image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
